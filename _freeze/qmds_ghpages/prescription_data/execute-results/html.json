{
  "hash": "a98fe4aadfbf8b8dabe5f9ef3296e524",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"prescription_data\"\nformat: html\n---\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(repos = c(CRAN = \"https://cloud.r-project.org\"))\nif (!require(\"remotes\")) install.packages(\"remotes\")\npkgs = c(\n    \"sf\",\n    \"tidyverse\",\n    \"here\",\n    \"tmap\",\n    \"geojsonsf\",\n    \"rvest\"\n)\n\nremotes::install_cran(pkgs)\nsapply(pkgs, require, character.only = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       sf tidyverse      here      tmap geojsonsf     rvest \n     TRUE      TRUE      TRUE      TRUE      TRUE      TRUE \n```\n\n\n:::\n:::\n\n\n\n## Downloading data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsubicb_boundaries <- st_read(file.path(here(),\"data_raw\",\"subicb_boundaries.gpkg\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `subicb_boundaries' from data source \n  `C:\\temp_jf\\CAZ-health-data-trends\\data_raw\\subicb_boundaries.gpkg' \n  using driver `GPKG'\nSimple feature collection with 106 features and 4 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 87318.43 ymin: 7053.782 xmax: 655646.4 ymax: 657547.7\nProjected CRS: OSGB36 / British National Grid\n```\n\n\n:::\n:::\n\n\n### SABA\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (!file.exists(file.path(here(),\"data_raw\",\"all_saba.csv\"))){\n  all_saba_raw <- do.call(bind_rows, lapply(subicb_boundaries$code, \\(t_code) {\n    read_csv(\n      paste0(\n        \"https://openprescribing.net/api/1.0/measure_by_practice/?format=csv&org=\",\n        t_code,\n        \"&parent_org_type=ccg&measure=saba\"\n      ),\n      col_types = cols(\n        measure = col_character(),\n        org_type = col_character(),\n        org_id = col_character(),\n        org_name = col_character(),\n        date = col_date(format = \"\"),\n        numerator = col_double(),\n        denominator = col_double(),\n        calc_value = col_double(),\n        percentile = col_double()\n      )\n    )\n  }))\n  write_csv(all_saba_raw,file = file.path(here(),\"data_raw\",\"all_saba.csv\"))\n} else{\n  all_saba_raw <- read_csv(file = file.path(here(),\"data_raw\",\"all_saba.csv\"))\n}\n```\n:::\n\n\n## All BFN groups\n\nDownloading the data for all BFN groups (API limits might apply)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_u <- \"https://openprescribing.net/bnf/\"\nbnf_site <- read_html(base_u)\n\nlinks <- bnf_site  |> html_nodes(\"a\")  |> html_attr(\"href\")\nlinks <- links[grep(\"/bnf/\\\\d{2,6}/$\",links)] |> str_remove(\"/bnf/\") |> str_remove(\"/$\")\nlinks <- links[order(nchar(links))]\n\ndates <- seq(as.Date(\"2020-06-01\"),as.Date(\"2025-03-01\"),\"months\")\n\nfull_data_grid <- expand_grid(code = links, date = dates) |> mutate(group = nchar(code),\n                                                                    file.name = paste0(code,\"_\",date,\".csv\"))\n\nwrite_rds(full_data_grid,file = \"data_raw/full_bnf_grid.rds\")\n\nlimit_group2 <- full_data_grid |> filter(group == 2) |> nrow()\n\n\n## This is to be run \ndir.create(\"data_raw/bnf_all\",showWarnings = F)\nall_bnf_codes <- lapply(seq_len(limit_group2),\n                        \\(x){\n  \n  if(!file.exists(file.path(\"data_raw\",\"bnf_all\",full_data_grid$file.name[x]))){                        \n  download.file(paste0(\"https://openprescribing.net/api/1.0/spending_by_org/?org_type=practice&code=\",\n       full_data_grid$code[x],\n       \"&date=\",\n       full_data_grid$date[x],\n       \"&format=csv\"),\n       destfile = file.path(\"data_raw\",\"bnf_all\",full_data_grid$file.name[x]),mode = \"wb\")}\n        \n\n})   \n```\n:::\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}