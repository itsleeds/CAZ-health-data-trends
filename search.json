[
  {
    "objectID": "qmds_ghpages/prescription_data.html",
    "href": "qmds_ghpages/prescription_data.html",
    "title": "prescription_data",
    "section": "",
    "text": "Show the code\noptions(repos = c(CRAN = \"https://cloud.r-project.org\"))\nif (!require(\"remotes\")) install.packages(\"remotes\")\npkgs = c(\n    \"sf\",\n    \"tidyverse\",\n    \"here\",\n    \"tmap\",\n    \"geojsonsf\",\n    \"rvest\"\n)\n\nremotes::install_cran(pkgs)\nsapply(pkgs, require, character.only = TRUE)\n\n\n       sf tidyverse      here      tmap geojsonsf     rvest \n     TRUE      TRUE      TRUE      TRUE      TRUE      TRUE",
    "crumbs": [
      "Data",
      "Prescriptions"
    ]
  },
  {
    "objectID": "qmds_ghpages/prescription_data.html#downloading-data",
    "href": "qmds_ghpages/prescription_data.html#downloading-data",
    "title": "prescription_data",
    "section": "Downloading data",
    "text": "Downloading data\n\n\nShow the code\nsubicb_boundaries &lt;- st_read(file.path(here(),\"data_raw\",\"subicb_boundaries.gpkg\"))\n\n\nReading layer `subicb_boundaries' from data source \n  `C:\\temp_jf\\CAZ-health-data-trends\\data_raw\\subicb_boundaries.gpkg' \n  using driver `GPKG'\nSimple feature collection with 106 features and 4 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 87318.43 ymin: 7053.782 xmax: 655646.4 ymax: 657547.7\nProjected CRS: OSGB36 / British National Grid\n\n\n\nSABA\n\n\nShow the code\nif (!file.exists(file.path(here(),\"data_raw\",\"all_saba.csv\"))){\n  all_saba_raw &lt;- do.call(bind_rows, lapply(subicb_boundaries$code, \\(t_code) {\n    read_csv(\n      paste0(\n        \"https://openprescribing.net/api/1.0/measure_by_practice/?format=csv&org=\",\n        t_code,\n        \"&parent_org_type=ccg&measure=saba\"\n      ),\n      col_types = cols(\n        measure = col_character(),\n        org_type = col_character(),\n        org_id = col_character(),\n        org_name = col_character(),\n        date = col_date(format = \"\"),\n        numerator = col_double(),\n        denominator = col_double(),\n        calc_value = col_double(),\n        percentile = col_double()\n      )\n    )\n  }))\n  write_csv(all_saba_raw,file = file.path(here(),\"data_raw\",\"all_saba.csv\"))\n} else{\n  all_saba_raw &lt;- read_csv(file = file.path(here(),\"data_raw\",\"all_saba.csv\"))\n}",
    "crumbs": [
      "Data",
      "Prescriptions"
    ]
  },
  {
    "objectID": "qmds_ghpages/prescription_data.html#all-bfn-groups",
    "href": "qmds_ghpages/prescription_data.html#all-bfn-groups",
    "title": "prescription_data",
    "section": "All BFN groups",
    "text": "All BFN groups\nDownloading the data for all BFN groups (API limits might apply)\n\n\nShow the code\nbase_u &lt;- \"https://openprescribing.net/bnf/\"\nbnf_site &lt;- read_html(base_u)\n\nlinks &lt;- bnf_site  |&gt; html_nodes(\"a\")  |&gt; html_attr(\"href\")\nlinks &lt;- links[grep(\"/bnf/\\\\d{2,6}/$\",links)] |&gt; str_remove(\"/bnf/\") |&gt; str_remove(\"/$\")\nlinks &lt;- links[order(nchar(links))]\n\ndates &lt;- seq(as.Date(\"2020-06-01\"),as.Date(\"2025-03-01\"),\"months\")\n\nfull_data_grid &lt;- expand_grid(code = links, date = dates) |&gt; mutate(group = nchar(code),\n                                                                    file.name = paste0(code,\"_\",date,\".csv\"))\n\nwrite_rds(full_data_grid,file = \"data_raw/full_bnf_grid.rds\")\n\nlimit_group2 &lt;- full_data_grid |&gt; filter(group == 2) |&gt; nrow()\n\n\n## This is to be run \ndir.create(\"data_raw/bnf_all\",showWarnings = F)\nall_bnf_codes &lt;- lapply(seq_len(limit_group2),\n                        \\(x){\n  \n  if(!file.exists(file.path(\"data_raw\",\"bnf_all\",full_data_grid$file.name[x]))){                        \n  download.file(paste0(\"https://openprescribing.net/api/1.0/spending_by_org/?org_type=practice&code=\",\n       full_data_grid$code[x],\n       \"&date=\",\n       full_data_grid$date[x],\n       \"&format=csv\"),\n       destfile = file.path(\"data_raw\",\"bnf_all\",full_data_grid$file.name[x]),mode = \"wb\")}\n        \n\n})",
    "crumbs": [
      "Data",
      "Prescriptions"
    ]
  },
  {
    "objectID": "qmds_ghpages/index.html",
    "href": "qmds_ghpages/index.html",
    "title": "CAZ-health-data-trends",
    "section": "",
    "text": "This is a place holder for the main",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "qmds_ghpages/CAZ_prescription_trends.html",
    "href": "qmds_ghpages/CAZ_prescription_trends.html",
    "title": "CAZ_prescription_trends",
    "section": "",
    "text": "Show the code\noptions(repos = c(CRAN = \"https://cloud.r-project.org\"))\nif (!require(\"remotes\")) install.packages(\"remotes\")\npkgs = c(\n    \"sf\",\n    \"tidyverse\",\n    \"here\",\n    \"tmap\"\n)\n\nremotes::install_cran(pkgs)\nsapply(pkgs, require, character.only = TRUE)\n\n\n       sf tidyverse      here      tmap \n     TRUE      TRUE      TRUE      TRUE",
    "crumbs": [
      "Analysis",
      "Trends by practice location"
    ]
  },
  {
    "objectID": "qmds_ghpages/CAZ_prescription_trends.html#loading-data",
    "href": "qmds_ghpages/CAZ_prescription_trends.html#loading-data",
    "title": "CAZ_prescription_trends",
    "section": "Loading data",
    "text": "Loading data\n\nGP practices\n\n\nShow the code\npract_classed &lt;- st_read(\"data_raw/CAZ_practices.gpkg\")\n\n\nReading layer `CAZ_practices' from data source \n  `C:\\temp_jf\\CAZ-health-data-trends\\data_raw\\CAZ_practices.gpkg' \n  using driver `GPKG'\nSimple feature collection with 1362 features and 6 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 346814 ymin: 91824 xmax: 472242 ymax: 574443\nProjected CRS: OSGB36 / British National Grid\n\n\nShow the code\nCAZ_lst &lt;- read_csv(\"data_raw/CAZ_list.csv\")\n\n\nRows: 14 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): CAZ, Area, Type, file, Source\ndbl (1): Start\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nPatient data\n\n\nShow the code\npatient_num_df &lt;- read_csv(\"data_raw/practice_patients.csv\")\n\n\nRows: 390000 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (8): PUBLICATION, EXTRACT_DATE, TYPE, CODE, POSTCODE, SEX, AGE, month\ndbl (2): NUMBER_OF_PATIENTS, year\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nShow the code\npatient_num_df$month &lt;- match(patient_num_df$month,tolower(month.name))\n\n\n\n\nPrescription data\n\n\nShow the code\nall_saba_raw &lt;- read_csv(file = file.path(here(),\"data_raw\",\"all_saba.csv\"))\n\n\nRows: 499773 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): measure, org_type, org_id, org_name\ndbl  (4): numerator, denominator, calc_value, percentile\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.",
    "crumbs": [
      "Analysis",
      "Trends by practice location"
    ]
  },
  {
    "objectID": "qmds_ghpages/CAZ_prescription_trends.html#preparing-data",
    "href": "qmds_ghpages/CAZ_prescription_trends.html#preparing-data",
    "title": "CAZ_prescription_trends",
    "section": "Preparing data",
    "text": "Preparing data\n\n\nShow the code\nCAZ_practices &lt;- pract_classed |&gt;\n  mutate(location_class = case_when(buffer_km==0~\"within_CAZ\",\n                                    buffer_km&lt;=1~\"within_1km\",\n                                    buffer_km&lt;=5~\"within_5km\",\n                                    TRUE~\"out_CAZ\")) |&gt; \n  mutate(location_class = factor(location_class,\n                                 levels = c(\"within_CAZ\",\"within_1km\",\"within_5km\",\"out_CAZ\"),\n                                 ordered = T)) \n  \nCAZ_patients &lt;- patient_num_df |&gt; filter(CODE %in% CAZ_practices$code)\n\nCAZ_SABA &lt;- all_saba_raw |&gt; \n  filter(org_id %in% CAZ_practices$code) |&gt; \n  mutate(month = month(date),\n         year = year(date)) |&gt; \n  left_join(CAZ_patients,by = c(\"org_id\" = \"CODE\",\"month\",\"year\"))",
    "crumbs": [
      "Analysis",
      "Trends by practice location"
    ]
  },
  {
    "objectID": "qmds_ghpages/CAZ_prescription_trends.html#visualising-trends",
    "href": "qmds_ghpages/CAZ_prescription_trends.html#visualising-trends",
    "title": "CAZ_prescription_trends",
    "section": "Visualising trends",
    "text": "Visualising trends\n\nSABA numerator\n\n\nShow the code\nplots_SABA_ratio &lt;- CAZ_SABA |&gt; \n  left_join(CAZ_practices |&gt; st_drop_geometry() |&gt; \n              select(code,location_class,CAZ_name),by = c(\"org_id\"=\"code\")) |&gt; \n  summarise(across(c(NUMBER_OF_PATIENTS,numerator,denominator),\\(x) sum(x,na.rm = T)),\n            .by = c(location_class,CAZ_name,month,year,date)) |&gt;\n  mutate(calc_value = numerator/denominator) |&gt; \n  nest(.by = c(CAZ_name)) |&gt; \n  left_join(CAZ_lst |&gt; select(CAZ,Start),by = c(\"CAZ_name\"= \"CAZ\")) |&gt; \n  mutate(trend_data = map2(data,Start,\n                           \\(.x,.y){\n                             .x |&gt; \n                               filter(year&gt;=.y)\n                           })) |&gt; \n  mutate(ratio_plots = map2(data,trend_data,\n                      \\(.x, .y){\n                        .x |&gt; ggplot(aes(x = date, y = calc_value,colour = location_class))+\n                          geom_line(aes(group = location_class),alpha = 0.2,linewidth = 0.2)+\n                          geom_smooth(data = .y,\n                                      method = \"lm\", se = F)+\n                          theme_minimal()+\n                          scale_color_brewer(palette = \"Set1\")+\n                          scale_y_continuous(limits = c(0,0.7))\n  }),\n  ratio_plots = map2(ratio_plots,CAZ_name,\\(.x,.y){\n    .x + labs(title = .y,\n              y = \"SABA ratio\",\n              col = \"Location Class\",\n              x = \"\")}\n              )) |&gt; \n  mutate(denom_plots = map2(data,trend_data,\n                      \\(.x, .y){\n                        .x |&gt; ggplot(aes(x = date, y = denominator/NUMBER_OF_PATIENTS,colour = location_class))+\n                          geom_line(aes(group = location_class),alpha = 0.2,linewidth = 0.2)+\n                          geom_smooth(data = .y,\n                                      method = \"lm\", se = F)+\n                          theme_minimal()+\n                          scale_color_brewer(palette = \"Set1\")\n  }),\n  denom_plots = map2(denom_plots,CAZ_name,\\(.x,.y){\n    .x + labs(title = .y,\n              y = \"Prescr/Num patients\",\n              col = \"Location Class\",\n              x = \"\")}\n              )) |&gt; \n  mutate(num_plots = map2(data,trend_data,\n                      \\(.x, .y){\n                        .x |&gt; ggplot(aes(x = date, y = numerator/NUMBER_OF_PATIENTS,colour = location_class))+\n                          geom_line(aes(group = location_class),alpha = 0.2,linewidth = 0.2)+\n                          geom_smooth(data = .y,\n                                      method = \"lm\", se = F)+\n                          theme_minimal()+\n                          scale_color_brewer(palette = \"Set1\")\n  }),\n  num_plots = map2(num_plots,CAZ_name,\\(.x,.y){\n    .x + labs(title = .y,\n              y = \"Prescr/Num patients\",\n              col = \"Location Class\",\n              x = \"\")}\n              ))\n\nplots_SABA_ratio$ratio_plots\n\n\n[[1]]\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n[[2]]\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n[[3]]\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n[[4]]\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n[[5]]\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n[[6]]\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n[[7]]\n\n\n`geom_smooth()` using formula = 'y ~ x'",
    "crumbs": [
      "Analysis",
      "Trends by practice location"
    ]
  },
  {
    "objectID": "qmds_ghpages/CAZ_prescription_trends.html#saba-numerator-1",
    "href": "qmds_ghpages/CAZ_prescription_trends.html#saba-numerator-1",
    "title": "CAZ_prescription_trends",
    "section": "SABA numerator",
    "text": "SABA numerator\n\n\nShow the code\nplots_SABA_ratio$num_plots\n\n\n[[1]]\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 20 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\n\n\n\n\n\n\n\n\n[[2]]\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 20 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\n\n\n\n\n\n\n\n\n[[3]]\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 20 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\n\n\n\n\n\n\n\n\n[[4]]\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 20 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\n\n\n\n\n\n\n\n\n[[5]]\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 20 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\n\n\n\n\n\n\n\n\n[[6]]\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 20 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\n\n\n\n\n\n\n\n\n[[7]]\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 20 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\n\n\n\n\n\n\n\n\nSABA denominator (all inhalers)\n\n\nShow the code\nplots_SABA_ratio$denom_plots\n\n\n[[1]]\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 20 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\n\n\n\n\n\n\n\n\n[[2]]\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 20 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\n\n\n\n\n\n\n\n\n[[3]]\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 20 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\n\n\n\n\n\n\n\n\n[[4]]\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 20 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\n\n\n\n\n\n\n\n\n[[5]]\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 20 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\n\n\n\n\n\n\n\n\n[[6]]\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 20 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\n\n\n\n\n\n\n\n\n[[7]]\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 20 rows containing non-finite outside the scale range\n(`stat_smooth()`).",
    "crumbs": [
      "Analysis",
      "Trends by practice location"
    ]
  },
  {
    "objectID": "qmds_ghpages/about.html",
    "href": "qmds_ghpages/about.html",
    "title": "About",
    "section": "",
    "text": "Place holder for the about section of this site",
    "crumbs": [
      "About"
    ]
  },
  {
    "objectID": "qmds_ghpages/CAZ_definition.html",
    "href": "qmds_ghpages/CAZ_definition.html",
    "title": "Clean Air Zones (CAZ)",
    "section": "",
    "text": "Show the code\noptions(repos = c(CRAN = \"https://cloud.r-project.org\"))\nif (!require(\"remotes\")) install.packages(\"remotes\")\npkgs = c(\n    \"sf\",\n    \"tidyverse\",\n    \"here\",\n    \"tmap\"\n)\n\nremotes::install_cran(pkgs)\nsapply(pkgs, require, character.only = TRUE)\n\n\n       sf tidyverse      here      tmap \n     TRUE      TRUE      TRUE      TRUE \n\n\n\n\n\n\nThe boundaries have been obtained manually from the different official repositories and compiled in a single gpkg file. The url to the sources is available in the metadata file.\n\n\nShow the code\ndir.create(\"data_raw\",showWarnings = F)\nif (!file.exists(\"data_raw/CAZ_boundaries.gpkg\")){\n  u &lt;- \"https://github.com/itsleeds/CAZ-health-data-trends/releases/download/v0/CAZ_boundaries.gpkg\"\n  f &lt;- basename(u)\n  download.file(u,destfile = file.path(\"data_raw\",f),mode = \"wb\",)\n}\n\n\n\n\n\n\n\nShow the code\nif (!file.exists(\"data_raw/CAZ_list.csv\")){\n  u &lt;- \"https://github.com/itsleeds/CAZ-health-data-trends/releases/download/v0/CAZ_list.csv\"\n  f &lt;- basename(u)\n  download.file(u,destfile = file.path(\"data_raw\",f),mode = \"wb\",)\n}\n\n\n\n\n\n\n\n\nShow the code\ncaz_boundaries &lt;- st_read(file.path(here(),\"data_raw\",\"CAZ_boundaries.gpkg\"))\n\n\nReading layer `CAZ_boundaries' from data source \n  `C:\\temp_jf\\CAZ-health-data-trends\\data_raw\\CAZ_boundaries.gpkg' \n  using driver `GPKG'\nSimple feature collection with 7 features and 1 field\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 356346.4 ymin: 99474.13 xmax: 465151.9 ymax: 565398\nProjected CRS: OSGB36 / British National Grid\n\n\nShow the code\ncaz_metadata &lt;- read_csv(file.path(here(),\"data_raw\",\"CAZ_list.csv\"))\n\n\nRows: 14 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): CAZ, Area, Type, file, Source\ndbl (1): Start\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\n\nShow the code\nbuffers &lt;- c(0,0.5,1,5,10)*1e3\n\ncaz_buffers &lt;- lapply(buffers, \\(buff_dist) {\n  st_buffer(caz_boundaries, dist = buff_dist) |&gt;\n    mutate(buffer_km = buff_dist / 1e3)\n}) |&gt;\n  bind_rows()\n\n\n\n\nShow the code\nst_write(caz_buffers,file.path(here(),\"data_raw\",\"CAZ_buffers.gpkg\"),append = FALSE)\n\n\nDeleting layer `CAZ_buffers' using driver `GPKG'\nWriting layer `CAZ_buffers' to data source \n  `C:/temp_jf/CAZ-health-data-trends/data_raw/CAZ_buffers.gpkg' using driver `GPKG'\nWriting 35 features with 2 fields and geometry type Polygon.\n\n\nA quick visualisation\n\n\nShow the code\ntmap_mode(\"view\")\n\n\nℹ tmap mode set to \"view\".\n\n\nShow the code\ntm_shape(caz_buffers |&gt; arrange(-buffer_km))+\n  tm_polygons(\"buffer_km\",\n              fill_alpha = 0.4,\n              fill.scale = tm_scale_discrete(ticks = buffers/1e3,\n                                             values = \"-brewer.blues\")\n              )",
    "crumbs": [
      "Data",
      "Clean Air Zones"
    ]
  },
  {
    "objectID": "qmds_ghpages/CAZ_definition.html#downloading-data",
    "href": "qmds_ghpages/CAZ_definition.html#downloading-data",
    "title": "Clean Air Zones (CAZ)",
    "section": "",
    "text": "The boundaries have been obtained manually from the different official repositories and compiled in a single gpkg file. The url to the sources is available in the metadata file.\n\n\nShow the code\ndir.create(\"data_raw\",showWarnings = F)\nif (!file.exists(\"data_raw/CAZ_boundaries.gpkg\")){\n  u &lt;- \"https://github.com/itsleeds/CAZ-health-data-trends/releases/download/v0/CAZ_boundaries.gpkg\"\n  f &lt;- basename(u)\n  download.file(u,destfile = file.path(\"data_raw\",f),mode = \"wb\",)\n}\n\n\n\n\n\n\n\nShow the code\nif (!file.exists(\"data_raw/CAZ_list.csv\")){\n  u &lt;- \"https://github.com/itsleeds/CAZ-health-data-trends/releases/download/v0/CAZ_list.csv\"\n  f &lt;- basename(u)\n  download.file(u,destfile = file.path(\"data_raw\",f),mode = \"wb\",)\n}",
    "crumbs": [
      "Data",
      "Clean Air Zones"
    ]
  },
  {
    "objectID": "qmds_ghpages/CAZ_definition.html#loading-data",
    "href": "qmds_ghpages/CAZ_definition.html#loading-data",
    "title": "Clean Air Zones (CAZ)",
    "section": "",
    "text": "Show the code\ncaz_boundaries &lt;- st_read(file.path(here(),\"data_raw\",\"CAZ_boundaries.gpkg\"))\n\n\nReading layer `CAZ_boundaries' from data source \n  `C:\\temp_jf\\CAZ-health-data-trends\\data_raw\\CAZ_boundaries.gpkg' \n  using driver `GPKG'\nSimple feature collection with 7 features and 1 field\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 356346.4 ymin: 99474.13 xmax: 465151.9 ymax: 565398\nProjected CRS: OSGB36 / British National Grid\n\n\nShow the code\ncaz_metadata &lt;- read_csv(file.path(here(),\"data_raw\",\"CAZ_list.csv\"))\n\n\nRows: 14 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): CAZ, Area, Type, file, Source\ndbl (1): Start\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.",
    "crumbs": [
      "Data",
      "Clean Air Zones"
    ]
  },
  {
    "objectID": "qmds_ghpages/CAZ_definition.html#processing-buffers",
    "href": "qmds_ghpages/CAZ_definition.html#processing-buffers",
    "title": "Clean Air Zones (CAZ)",
    "section": "",
    "text": "Show the code\nbuffers &lt;- c(0,0.5,1,5,10)*1e3\n\ncaz_buffers &lt;- lapply(buffers, \\(buff_dist) {\n  st_buffer(caz_boundaries, dist = buff_dist) |&gt;\n    mutate(buffer_km = buff_dist / 1e3)\n}) |&gt;\n  bind_rows()\n\n\n\n\nShow the code\nst_write(caz_buffers,file.path(here(),\"data_raw\",\"CAZ_buffers.gpkg\"),append = FALSE)\n\n\nDeleting layer `CAZ_buffers' using driver `GPKG'\nWriting layer `CAZ_buffers' to data source \n  `C:/temp_jf/CAZ-health-data-trends/data_raw/CAZ_buffers.gpkg' using driver `GPKG'\nWriting 35 features with 2 fields and geometry type Polygon.\n\n\nA quick visualisation\n\n\nShow the code\ntmap_mode(\"view\")\n\n\nℹ tmap mode set to \"view\".\n\n\nShow the code\ntm_shape(caz_buffers |&gt; arrange(-buffer_km))+\n  tm_polygons(\"buffer_km\",\n              fill_alpha = 0.4,\n              fill.scale = tm_scale_discrete(ticks = buffers/1e3,\n                                             values = \"-brewer.blues\")\n              )",
    "crumbs": [
      "Data",
      "Clean Air Zones"
    ]
  },
  {
    "objectID": "qmds_ghpages/fingertips_data.html",
    "href": "qmds_ghpages/fingertips_data.html",
    "title": "fingertips_data",
    "section": "",
    "text": "Show the code\noptions(repos = c(CRAN = \"https://cloud.r-project.org\"))\nif (!require(\"remotes\")) install.packages(\"remotes\")\npkgs = c(\n    \"sf\",\n    \"tidyverse\",\n    \"here\",\n    \"tmap\"\n)\n\nremotes::install_cran(pkgs)\nsapply(pkgs, require, character.only = TRUE)\n\n\n       sf tidyverse      here      tmap \n     TRUE      TRUE      TRUE      TRUE \n\n\nShow the code\nif (!(\"fingertipsR\" %in% installed.packages())){\n  remotes::install_github(\"rOpenSci/fingertipsR\",\n                          build_vignettes = TRUE,\n                          quiet = TRUE)\n}\n\nlibrary(fingertipsR)\nDownloading profile list\nShow the code\nprofile_lst &lt;- profiles()\nhead(profile_lst)\n\n\n# A tibble: 6 × 4\n  ProfileID ProfileName       DomainID DomainName                               \n      &lt;int&gt; &lt;chr&gt;                &lt;int&gt; &lt;chr&gt;                                    \n1        18 Smoking Profile 1938132885 Key indicators                           \n2        18 Smoking Profile 1938132886 Smoking prevalence in adults             \n3        18 Smoking Profile 1938132900 Smoking prevalence in priority populatio…\n4        18 Smoking Profile 1938132887 Smoking related mortality                \n5        18 Smoking Profile 1938132888 Smoking related ill health               \n6        18 Smoking Profile 1938132889 Impact of smoking\nIndicator list for Asthma domain (code 8000009)\nShow the code\nindicator_lst_asthma &lt;- indicators(DomainID = 8000009)\n\nindicator_lst_asthma |&gt;\n  head(10) |&gt; \n  knitr::kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\nIndicatorID\nIndicatorName\nDomainID\nDomainName\nProfileID\nProfileName\n\n\n\n\n90810\nHospital admissions for asthma (under 19 years)\n8000009\nAsthma\n29\nRespiratory disease\n\n\n90933\nAsthma: QOF prevalence\n8000009\nAsthma\n29\nRespiratory disease\n\n\n93573\nEmergency hospital admissions for asthma in adults (aged 19 years and over)\n8000009\nAsthma\n29\nRespiratory disease\n\n\n93594\nMedian length of stay (days) of emergency admissions to hospital for asthma in adults (aged 19 years and over)\n8000009\nAsthma\n29\nRespiratory disease\n\n\n93595\nMedian length of stay (days) of emergency admissions to hospital for asthma (aged under 19 years)\n8000009\nAsthma\n29\nRespiratory disease\n\n\n93644\nMortality rate from asthma\n8000009\nAsthma\n29\nRespiratory disease\n\n\n93790\nPatients with Asthma: review in the last 12 months (denominator incl. PCAs)\n8000009\nAsthma\n29\nRespiratory disease\n\n\n93791\nPatients with Asthma (6-19 yrs): Second-hand smoking status recorded in the last 12 months (denominator incl. PCAs)\n8000009\nAsthma\n29\nRespiratory disease\nIndicator list for Respiratory disease (code 29)\nShow the code\nindicator_lst_resp &lt;- indicators(ProfileID = 29)\n\nindicator_lst_resp |&gt; \n  head(10) |&gt; \n  knitr::kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\nIndicatorID\nIndicatorName\nDomainID\nDomainName\nProfileID\nProfileName\n\n\n\n\n253\nCOPD: QOF prevalence\n8000003\nKey indicators\n29\nRespiratory disease\n\n\n1204\nMortality rate from chronic obstructive pulmonary disease, all ages\n8000003\nKey indicators\n29\nRespiratory disease\n\n\n40701\nUnder 75 mortality rate from respiratory disease\n8000003\nKey indicators\n29\nRespiratory disease\n\n\n90810\nHospital admissions for asthma (under 19 years)\n8000003\nKey indicators\n29\nRespiratory disease\n\n\n90933\nAsthma: QOF prevalence\n8000003\nKey indicators\n29\nRespiratory disease\n\n\n93573\nEmergency hospital admissions for asthma in adults (aged 19 years and over)\n8000003\nKey indicators\n29\nRespiratory disease\n\n\n93574\nEmergency hospital admissions for pneumonia\n8000003\nKey indicators\n29\nRespiratory disease\n\n\n93575\nEmergency hospital admissions for respiratory disease\n8000003\nKey indicators\n29\nRespiratory disease\n\n\n93576\nEmergency hospital admissions for bronchiolitis in children aged under 2 years\n8000003\nKey indicators\n29\nRespiratory disease\n\n\n93577\nEmergency hospital admissions for COPD, all ages\n8000003\nKey indicators\n29\nRespiratory disease\nSelecting the codes for Respiratory profile\nShow the code\nsel_indicator &lt;- indicator_lst_resp |&gt;\n  pull(IndicatorID)\nIndicators are reported for different area types. The next code extracts the area types for each indicator.\nShow the code\narea_avail_ind &lt;- do.call(bind_rows,lapply(sel_indicator,\\(x) indicator_areatypes(IndicatorID = x)))\nShow the code\narea_ty_lst &lt;- area_types()\nShow the code\narea_avail_ind_names &lt;- area_avail_ind |&gt;\n  left_join(\n    indicator_lst_resp |&gt;\n      select(IndicatorID, IndicatorName) |&gt;\n      unique(),\n    by = join_by(IndicatorID)\n  ) |&gt; \n  left_join(\n    area_ty_lst |&gt; \n      select(AreaTypeID,AreaTypeName) |&gt; \n      unique(),\n    by=join_by(AreaTypeID)\n  )\n\nslice_sample(area_avail_ind_names,n = 15) |&gt;\n  select(-IndicatorID,-AreaTypeID) |&gt;\n  knitr::kable()\n\n\n\n\n\n\n\n\n\nIndicatorName\nAreaTypeName\n\n\n\n\nFuel poverty (low income, low energy efficiency methodology)\nGovernment Office Region (E12)\n\n\nUnder 75 mortality rate from respiratory disease considered preventable\nICBs, former STPs\n\n\nHigh-dose inhaled corticosteroid prescribing\nSub-ICB, former CCGs\n\n\nAsthma: QOF prevalence\nGovernment Office Region (E12)\n\n\nMortality rate from pneumonia (underlying cause)\nGovernment Office Region (E12)\n\n\nMortality rate from asthma\nEngland\n\n\nSmoking status at time of delivery\nLower tier local authorities (post 4/23)\n\n\nSmoking status of patients with certain conditions recorded in the last 12 months (denominator incl. PCAs)\nICBs, former STPs\n\n\nEmergency hospital admissions for bronchiolitis in children aged under 2 years\nSub-ICB, former CCGs\n\n\nEmergency hospital admissions for bronchiolitis in children aged under 2 years\nICBs, former STPs\n\n\nAir pollution: fine particulate matter (new method - concentrations of total PM2.5)\nGovernment Office Region (E12)\n\n\nSmoking status of patients with certain conditions recorded in the last 12 months (denominator incl. PCAs)\nUpper tier local authorities (post 4/23)\n\n\nPatients with Asthma (6-19 yrs): Second-hand smoking status recorded in the last 12 months (denominator incl. PCAs)\nGeneral Practice\n\n\nHospital admissions for asthma (under 19 years)\nUpper tier local authorities (4/20-3/21)\n\n\nFuel poverty (low income, low energy efficiency methodology)\nEngland\nData for one indicator of the Respiratory profile\nShow the code\ntemp_data &lt;- fingertips_data(\n  IndicatorID = area_avail_ind$IndicatorID[1],\n  AreaTypeID = area_avail_ind$AreaTypeID[1]\n  )\nShow the code\n# Code from vignette \ncols &lt;- c(\"IndicatorID\", \"AreaCode\", \"ParentName\", \"Sex\", \"Timeperiod\", \"Value\")\n\narea_type_name &lt;- table(temp_data$AreaType) # tally each group in the AreaType field\n\narea_type_name &lt;- area_type_name[area_type_name == max(area_type_name)] # pick the group with the highest frequency\narea_type_name &lt;- names(area_type_name) # retrieve the name\n\nset.seed(1234)\nsamp_areas &lt;- sample(temp_data$AreaCode |&gt; unique(),5)\n\n\ndata &lt;- temp_data[temp_data$AreaType == area_type_name & temp_data$AreaCode %in% samp_areas,\n                  cols]\nWe are going to show the historic data for five areas of type Counties & UAs (from Apr 2023)\nShow the code\nggplot(data,aes(x = Timeperiod,y = Value, col = AreaCode ,group = AreaCode))+\n  geom_line()+\n  labs(title = area_avail_ind_names$IndicatorName[1],subtitle = paste0(\"Showning a sample of \", area_type_name))+\n  theme(axis.text.x = element_text(angle = 90))",
    "crumbs": [
      "Data",
      "Health indicators"
    ]
  },
  {
    "objectID": "qmds_ghpages/fingertips_data.html#compiling-a-list-of-indicators-from-the-respiratory-and-asthma-domain-that-are-available-for-lower-and-upper-tier-la",
    "href": "qmds_ghpages/fingertips_data.html#compiling-a-list-of-indicators-from-the-respiratory-and-asthma-domain-that-are-available-for-lower-and-upper-tier-la",
    "title": "fingertips_data",
    "section": "Compiling a list of indicators from the Respiratory and Asthma domain that are available for lower and upper tier LA",
    "text": "Compiling a list of indicators from the Respiratory and Asthma domain that are available for lower and upper tier LA\n\n\nShow the code\nindicator_lst_all &lt;- bind_rows(indicator_lst_resp,indicator_lst_asthma)\n\nsel_indicator_all &lt;- indicator_lst_all |&gt; pull(IndicatorID) |&gt; unique()\n\n\nThe following code will extract the indicators that are available for lower/upper LA\n\n\nShow the code\narea_avail_ind_all &lt;- do.call(bind_rows,lapply(sel_indicator_all,\\(x) indicator_areatypes(IndicatorID = x)))\n\nLA_ind_names_all &lt;- area_avail_ind_all |&gt;\n  left_join(\n    indicator_lst_all |&gt;\n      select(IndicatorID, IndicatorName) |&gt;\n      unique(),\n    by = join_by(IndicatorID)\n  ) |&gt; \n  left_join(\n    area_ty_lst |&gt; \n      select(AreaTypeID,AreaTypeName) |&gt; \n      unique(),\n    by=join_by(AreaTypeID)\n  ) |&gt; \n  filter(str_detect(AreaTypeName,pattern = \"(Upper|Lower|Practice|Sub-ICB)\"))",
    "crumbs": [
      "Data",
      "Health indicators"
    ]
  },
  {
    "objectID": "qmds_ghpages/practice_data.html",
    "href": "qmds_ghpages/practice_data.html",
    "title": "GP Practices",
    "section": "",
    "text": "Show the code\noptions(repos = c(CRAN = \"https://cloud.r-project.org\"))\nif (!require(\"remotes\")) install.packages(\"remotes\")\npkgs = c(\n    \"sf\",\n    \"tidyverse\",\n    \"here\",\n    \"tmap\",\n    \"geojsonsf\",\n    \"rvest\"\n)\n\nremotes::install_cran(pkgs)\nsapply(pkgs, require, character.only = TRUE)\n\n\n       sf tidyverse      here      tmap geojsonsf     rvest \n     TRUE      TRUE      TRUE      TRUE      TRUE      TRUE \n\n\n\n\n\n\n\n\nShow the code\nif (!file.exists(\"data_raw/subicb_boundaries.gpkg\")){\n  \n  u &lt;- \"https://openprescribing.net/api/1.0/org_location/?org_type=ccg\"\n  subicb_boundaries &lt;- geojsonsf::geojson_sf(u) |&gt;\n    st_transform(27700)\n  \n  st_write(subicb_boundaries,\n           dsn = file.path(here(),\"data_raw\",\"subicb_boundaries.gpkg\"),\n           append = FALSE\n           )\n} else{\n  subicb_boundaries &lt;- st_read(file.path(here(),\"data_raw\",\"subicb_boundaries.gpkg\"))\n}\n\n\nReading layer `subicb_boundaries' from data source \n  `C:\\temp_jf\\CAZ-health-data-trends\\data_raw\\subicb_boundaries.gpkg' \n  using driver `GPKG'\nSimple feature collection with 106 features and 4 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 87318.43 ymin: 7053.782 xmax: 655646.4 ymax: 657547.7\nProjected CRS: OSGB36 / British National Grid\n\n\n\n\n\nObtaining the location of GP practices from OpenPrescribing for each Sub-ICB\n\n\nShow the code\nif (!file.exists(\"data_raw/gp_locations.gpkg\")){\n  \n  all_practices &lt;- lapply(subicb_boundaries$code,\n                              \\(t_code) {\n                                geojsonsf::geojson_sf(\n                                  paste0(\"https://openprescribing.net/api/1.0/org_location/?q=\",\n                                         t_code)) |&gt;\n                                  st_transform(27700) |&gt; \n                                  mutate(par_code = t_code)\n  }) |&gt; \n    bind_rows()\n  \n  st_write(all_practices,\n           dsn = file.path(here(),\"data_raw\",\"gp_locations.gpkg\"),\n           append = FALSE\n           )\n} else{\n  all_practices &lt;- st_read(file.path(here(),\"data_raw\",\"gp_locations.gpkg\"))\n}\n\n\nReading layer `gp_locations' from data source \n  `C:\\temp_jf\\CAZ-health-data-trends\\data_raw\\gp_locations.gpkg' \n  using driver `GPKG'\nSimple feature collection with 11968 features and 4 fields (with 7 geometries empty)\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 90774 ymin: 10282 xmax: 655043 ymax: 653236\nProjected CRS: OSGB36 / British National Grid\n\n\n\n\n\n\n\nShow the code\ncaz_buffers &lt;- st_read(file.path(here(),\"data_raw\",\"CAZ_buffers.gpkg\"))\n\n\nReading layer `CAZ_buffers' from data source \n  `C:\\temp_jf\\CAZ-health-data-trends\\data_raw\\CAZ_buffers.gpkg' \n  using driver `GPKG'\nSimple feature collection with 35 features and 2 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 346347.5 ymin: 89474.96 xmax: 475150.8 ymax: 575397.8\nProjected CRS: OSGB36 / British National Grid\n\n\nSub-setting the practices within the buffers\n\n\nShow the code\ncaz_practices &lt;- all_practices[caz_buffers,]\n\n\nDetecting intersections and extracting the minimum buffer size\n\n\nShow the code\npractices_intersects &lt;- st_intersects(caz_practices,caz_buffers)\n\ncaz_practices$buffer_km &lt;- vapply(practices_intersects,\n       \\(caz_index){ caz_buffers$buffer_km[caz_index] |&gt; min()},\n       FUN.VALUE = numeric(1))\n\ncaz_practices$CAZ_name &lt;- vapply(practices_intersects,\n       \\(caz_index){caz_buffers$name[caz_index][which.min(caz_buffers$buffer_km[caz_index])]},\n       FUN.VALUE = character(1))\n\n\n\n\nShow the code\ntmap_mode(\"view\")\n\n\nℹ tmap mode set to \"view\".\n\n\nShow the code\nbuffers &lt;- c(0,0.5,1,5,10)*1e3\n\ntm_shape(caz_buffers |&gt; arrange(-buffer_km))+\n  tm_polygons(\"buffer_km\",\n              fill_alpha = 0.4,\n              fill.scale = tm_scale_discrete(ticks = buffers/1e3,\n                                             values = \"-brewer.blues\")\n              )+\ntm_shape(caz_practices)+\n  tm_dots(\"CAZ_name\")\n\n\nRegistered S3 method overwritten by 'jsonify':\n  method     from    \n  print.json jsonlite\n\n\n\n\n\n\n\n\n\n\nShow the code\nst_write(caz_practices,\n         dsn = file.path(here(),\"data_raw\",\"CAZ_practices.gpkg\"),\n         append = FALSE)\n\n\nDeleting layer `CAZ_practices' using driver `GPKG'\nWriting layer `CAZ_practices' to data source \n  `C:/temp_jf/CAZ-health-data-trends/data_raw/CAZ_practices.gpkg' using driver `GPKG'\nWriting 1362 features with 6 fields and geometry type Point.\n\n\n\n\n\n\nFrom the NHS we can extract total number of patients registered after each month. This code downloads all monthly reports programmatically, extracts the zip files, and saves a consolidated dataset as a csv file.\n\n\nShow the code\nif (!file.exists(file.path(here(),\"data_raw\",\"practice_patients.csv\"))){\n  \n  get_patients &lt;- function(){\n  base_u &lt;- \"https://digital.nhs.uk/data-and-information/publications/statistical/patients-registered-at-a-gp-practice/\"\n  \n  my_grid &lt;- expand.grid(month = tolower(month.name), year = 2020:2024)\n  my_grid$u &lt;- paste(my_grid$month, my_grid$year, sep = \"-\")\n  \n  folder_path &lt;- \"gp_patients\"\n  \n  dir.create(path = folder_path, showWarnings = F)\n  \n  cur_files &lt;- tools::file_path_sans_ext(list.files(folder_path))\n  \n  my_grid &lt;- my_grid[!(my_grid$u %in% cur_files), ]\n  \n  for (i in my_grid$u) {\n    print(paste0(base_u, i))\n    w &lt;- read_html(paste0(base_u, i))\n    \n    links &lt;- w  |&gt; html_nodes(\"a\")  |&gt; html_attr(\"href\")\n    \n    my_link &lt;- links[grep(links, pattern = \"gp-reg-pat-prac-all\")]\n    \n    download.file(\n      url = my_link,\n      destfile = paste0(folder_path, \"/\", i, \".\", tools::file_ext(my_link)),\n      mode = \"wb\"\n    )\n    \n    Sys.sleep(rnorm(1, mean = 5))\n  }\n  \n  # List all ZIP files in the folder\n  zip_files &lt;- list.files(path = folder_path,\n                          pattern = \"\\\\.zip$\",\n                          full.names = TRUE)\n  \n  # Extract each ZIP file\n  lapply(zip_files, function(zip_file) {\n    # Create a temporary directory for extraction\n    temp_dir &lt;- tempfile()\n    dir.create(temp_dir)\n    \n    # Extract the ZIP file into the temporary directory\n    unzip(zip_file, exdir = temp_dir)\n    \n    # List extracted files\n    extracted_files &lt;- list.files(path = temp_dir, full.names = TRUE)\n    \n    # Move and rename each extracted file to the original folder\n    lapply(extracted_files, function(file) {\n      file_extension &lt;- tools::file_ext(file)\n      new_name &lt;- file.path(folder_path,\n                            paste0(\n                              tools::file_path_sans_ext(basename(zip_file)),\n                              \".\",\n                              file_extension\n                            ))\n      file.rename(file, new_name)\n    })\n    \n    \n    # Remove the temporary directory\n    unlink(temp_dir, recursive = TRUE)\n  })\n  \n  \n  \n  all_data &lt;- lapply(list.files(\n    path = \"gp_patients\",\n    pattern = \"\\\\.csv$\",\n    full.names = T\n  ),\n  \\(x) {\n    read_csv(x) |&gt;\n      mutate(\n        month = str_extract(basename(x), \"[a-zA-Z]+(?=-)\"),\n        year = str_extract(basename(x), \"\\\\d{4}\")\n      )\n  })\n  \n  \n  common_names &lt;- reduce(lapply(all_data, names), intersect)\n  \n  all_data_df &lt;- do.call(rbind, lapply(all_data, \\(x) {\n    x[, common_names]\n  })) |&gt;\n    mutate(year = as.integer(year))\n  \n  write_csv(all_data_df,\n            file = file.path(here(),\"data_raw\",\"practice_patients.csv\"))\n  \n  }\n  \n  \n  get_patients()\n  \n  \n} else{\n  all_data_df &lt;- read_csv(file.path(here(),\"data_raw\",\"practice_patients.csv\"),\n                          col_types = cols(\n  PUBLICATION = col_character(),\n  EXTRACT_DATE = col_character(),\n  TYPE = col_character(),\n  CODE = col_character(),\n  POSTCODE = col_character(),\n  SEX = col_character(),\n  AGE = col_character(),\n  NUMBER_OF_PATIENTS = col_double(),\n  month = col_character(),\n  year = col_double()\n))\n}\n\n\n\n\n\n\nShow the code\ntmap_mode(\"plot\")\n\n\nℹ tmap mode set to \"plot\".\n\n\nShow the code\nsf_practices_size &lt;- all_practices |&gt;\n  left_join(all_data_df |&gt; \n  summarise(across(NUMBER_OF_PATIENTS,\\(x) median(x,na.rm = T)),.by = CODE),\n  by = c(\"code\" = \"CODE\"))\n\nsf_practices_size |&gt; \n  filter(NUMBER_OF_PATIENTS&lt;= quantile(NUMBER_OF_PATIENTS,0.9,na.rm = T)) |&gt; \n  arrange(-NUMBER_OF_PATIENTS) |&gt; \ntm_shape()+\n  tm_symbols(fill = \"NUMBER_OF_PATIENTS\",\n          size = \"NUMBER_OF_PATIENTS\",\n          col = NA,\n          size.scale = tm_scale_continuous(values.scale = 0.5),\n          size.legend = tm_legend_hide(),\n          # fill_alpha = 0.4,\n          fill.scale = tm_scale_intervals(n = 5, values = \"-tol.rainbow_wh_br\"))",
    "crumbs": [
      "Data",
      "GP Practices"
    ]
  },
  {
    "objectID": "qmds_ghpages/practice_data.html#loading-spatial-data",
    "href": "qmds_ghpages/practice_data.html#loading-spatial-data",
    "title": "GP Practices",
    "section": "",
    "text": "Show the code\nif (!file.exists(\"data_raw/subicb_boundaries.gpkg\")){\n  \n  u &lt;- \"https://openprescribing.net/api/1.0/org_location/?org_type=ccg\"\n  subicb_boundaries &lt;- geojsonsf::geojson_sf(u) |&gt;\n    st_transform(27700)\n  \n  st_write(subicb_boundaries,\n           dsn = file.path(here(),\"data_raw\",\"subicb_boundaries.gpkg\"),\n           append = FALSE\n           )\n} else{\n  subicb_boundaries &lt;- st_read(file.path(here(),\"data_raw\",\"subicb_boundaries.gpkg\"))\n}\n\n\nReading layer `subicb_boundaries' from data source \n  `C:\\temp_jf\\CAZ-health-data-trends\\data_raw\\subicb_boundaries.gpkg' \n  using driver `GPKG'\nSimple feature collection with 106 features and 4 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 87318.43 ymin: 7053.782 xmax: 655646.4 ymax: 657547.7\nProjected CRS: OSGB36 / British National Grid\n\n\n\n\n\nObtaining the location of GP practices from OpenPrescribing for each Sub-ICB\n\n\nShow the code\nif (!file.exists(\"data_raw/gp_locations.gpkg\")){\n  \n  all_practices &lt;- lapply(subicb_boundaries$code,\n                              \\(t_code) {\n                                geojsonsf::geojson_sf(\n                                  paste0(\"https://openprescribing.net/api/1.0/org_location/?q=\",\n                                         t_code)) |&gt;\n                                  st_transform(27700) |&gt; \n                                  mutate(par_code = t_code)\n  }) |&gt; \n    bind_rows()\n  \n  st_write(all_practices,\n           dsn = file.path(here(),\"data_raw\",\"gp_locations.gpkg\"),\n           append = FALSE\n           )\n} else{\n  all_practices &lt;- st_read(file.path(here(),\"data_raw\",\"gp_locations.gpkg\"))\n}\n\n\nReading layer `gp_locations' from data source \n  `C:\\temp_jf\\CAZ-health-data-trends\\data_raw\\gp_locations.gpkg' \n  using driver `GPKG'\nSimple feature collection with 11968 features and 4 fields (with 7 geometries empty)\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 90774 ymin: 10282 xmax: 655043 ymax: 653236\nProjected CRS: OSGB36 / British National Grid\n\n\n\n\n\n\n\nShow the code\ncaz_buffers &lt;- st_read(file.path(here(),\"data_raw\",\"CAZ_buffers.gpkg\"))\n\n\nReading layer `CAZ_buffers' from data source \n  `C:\\temp_jf\\CAZ-health-data-trends\\data_raw\\CAZ_buffers.gpkg' \n  using driver `GPKG'\nSimple feature collection with 35 features and 2 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 346347.5 ymin: 89474.96 xmax: 475150.8 ymax: 575397.8\nProjected CRS: OSGB36 / British National Grid\n\n\nSub-setting the practices within the buffers\n\n\nShow the code\ncaz_practices &lt;- all_practices[caz_buffers,]\n\n\nDetecting intersections and extracting the minimum buffer size\n\n\nShow the code\npractices_intersects &lt;- st_intersects(caz_practices,caz_buffers)\n\ncaz_practices$buffer_km &lt;- vapply(practices_intersects,\n       \\(caz_index){ caz_buffers$buffer_km[caz_index] |&gt; min()},\n       FUN.VALUE = numeric(1))\n\ncaz_practices$CAZ_name &lt;- vapply(practices_intersects,\n       \\(caz_index){caz_buffers$name[caz_index][which.min(caz_buffers$buffer_km[caz_index])]},\n       FUN.VALUE = character(1))\n\n\n\n\nShow the code\ntmap_mode(\"view\")\n\n\nℹ tmap mode set to \"view\".\n\n\nShow the code\nbuffers &lt;- c(0,0.5,1,5,10)*1e3\n\ntm_shape(caz_buffers |&gt; arrange(-buffer_km))+\n  tm_polygons(\"buffer_km\",\n              fill_alpha = 0.4,\n              fill.scale = tm_scale_discrete(ticks = buffers/1e3,\n                                             values = \"-brewer.blues\")\n              )+\ntm_shape(caz_practices)+\n  tm_dots(\"CAZ_name\")\n\n\nRegistered S3 method overwritten by 'jsonify':\n  method     from    \n  print.json jsonlite\n\n\n\n\n\n\n\n\n\n\nShow the code\nst_write(caz_practices,\n         dsn = file.path(here(),\"data_raw\",\"CAZ_practices.gpkg\"),\n         append = FALSE)\n\n\nDeleting layer `CAZ_practices' using driver `GPKG'\nWriting layer `CAZ_practices' to data source \n  `C:/temp_jf/CAZ-health-data-trends/data_raw/CAZ_practices.gpkg' using driver `GPKG'\nWriting 1362 features with 6 fields and geometry type Point.",
    "crumbs": [
      "Data",
      "GP Practices"
    ]
  },
  {
    "objectID": "qmds_ghpages/practice_data.html#registered-patients-data",
    "href": "qmds_ghpages/practice_data.html#registered-patients-data",
    "title": "GP Practices",
    "section": "",
    "text": "From the NHS we can extract total number of patients registered after each month. This code downloads all monthly reports programmatically, extracts the zip files, and saves a consolidated dataset as a csv file.\n\n\nShow the code\nif (!file.exists(file.path(here(),\"data_raw\",\"practice_patients.csv\"))){\n  \n  get_patients &lt;- function(){\n  base_u &lt;- \"https://digital.nhs.uk/data-and-information/publications/statistical/patients-registered-at-a-gp-practice/\"\n  \n  my_grid &lt;- expand.grid(month = tolower(month.name), year = 2020:2024)\n  my_grid$u &lt;- paste(my_grid$month, my_grid$year, sep = \"-\")\n  \n  folder_path &lt;- \"gp_patients\"\n  \n  dir.create(path = folder_path, showWarnings = F)\n  \n  cur_files &lt;- tools::file_path_sans_ext(list.files(folder_path))\n  \n  my_grid &lt;- my_grid[!(my_grid$u %in% cur_files), ]\n  \n  for (i in my_grid$u) {\n    print(paste0(base_u, i))\n    w &lt;- read_html(paste0(base_u, i))\n    \n    links &lt;- w  |&gt; html_nodes(\"a\")  |&gt; html_attr(\"href\")\n    \n    my_link &lt;- links[grep(links, pattern = \"gp-reg-pat-prac-all\")]\n    \n    download.file(\n      url = my_link,\n      destfile = paste0(folder_path, \"/\", i, \".\", tools::file_ext(my_link)),\n      mode = \"wb\"\n    )\n    \n    Sys.sleep(rnorm(1, mean = 5))\n  }\n  \n  # List all ZIP files in the folder\n  zip_files &lt;- list.files(path = folder_path,\n                          pattern = \"\\\\.zip$\",\n                          full.names = TRUE)\n  \n  # Extract each ZIP file\n  lapply(zip_files, function(zip_file) {\n    # Create a temporary directory for extraction\n    temp_dir &lt;- tempfile()\n    dir.create(temp_dir)\n    \n    # Extract the ZIP file into the temporary directory\n    unzip(zip_file, exdir = temp_dir)\n    \n    # List extracted files\n    extracted_files &lt;- list.files(path = temp_dir, full.names = TRUE)\n    \n    # Move and rename each extracted file to the original folder\n    lapply(extracted_files, function(file) {\n      file_extension &lt;- tools::file_ext(file)\n      new_name &lt;- file.path(folder_path,\n                            paste0(\n                              tools::file_path_sans_ext(basename(zip_file)),\n                              \".\",\n                              file_extension\n                            ))\n      file.rename(file, new_name)\n    })\n    \n    \n    # Remove the temporary directory\n    unlink(temp_dir, recursive = TRUE)\n  })\n  \n  \n  \n  all_data &lt;- lapply(list.files(\n    path = \"gp_patients\",\n    pattern = \"\\\\.csv$\",\n    full.names = T\n  ),\n  \\(x) {\n    read_csv(x) |&gt;\n      mutate(\n        month = str_extract(basename(x), \"[a-zA-Z]+(?=-)\"),\n        year = str_extract(basename(x), \"\\\\d{4}\")\n      )\n  })\n  \n  \n  common_names &lt;- reduce(lapply(all_data, names), intersect)\n  \n  all_data_df &lt;- do.call(rbind, lapply(all_data, \\(x) {\n    x[, common_names]\n  })) |&gt;\n    mutate(year = as.integer(year))\n  \n  write_csv(all_data_df,\n            file = file.path(here(),\"data_raw\",\"practice_patients.csv\"))\n  \n  }\n  \n  \n  get_patients()\n  \n  \n} else{\n  all_data_df &lt;- read_csv(file.path(here(),\"data_raw\",\"practice_patients.csv\"),\n                          col_types = cols(\n  PUBLICATION = col_character(),\n  EXTRACT_DATE = col_character(),\n  TYPE = col_character(),\n  CODE = col_character(),\n  POSTCODE = col_character(),\n  SEX = col_character(),\n  AGE = col_character(),\n  NUMBER_OF_PATIENTS = col_double(),\n  month = col_character(),\n  year = col_double()\n))\n}\n\n\n\n\n\n\nShow the code\ntmap_mode(\"plot\")\n\n\nℹ tmap mode set to \"plot\".\n\n\nShow the code\nsf_practices_size &lt;- all_practices |&gt;\n  left_join(all_data_df |&gt; \n  summarise(across(NUMBER_OF_PATIENTS,\\(x) median(x,na.rm = T)),.by = CODE),\n  by = c(\"code\" = \"CODE\"))\n\nsf_practices_size |&gt; \n  filter(NUMBER_OF_PATIENTS&lt;= quantile(NUMBER_OF_PATIENTS,0.9,na.rm = T)) |&gt; \n  arrange(-NUMBER_OF_PATIENTS) |&gt; \ntm_shape()+\n  tm_symbols(fill = \"NUMBER_OF_PATIENTS\",\n          size = \"NUMBER_OF_PATIENTS\",\n          col = NA,\n          size.scale = tm_scale_continuous(values.scale = 0.5),\n          size.legend = tm_legend_hide(),\n          # fill_alpha = 0.4,\n          fill.scale = tm_scale_intervals(n = 5, values = \"-tol.rainbow_wh_br\"))",
    "crumbs": [
      "Data",
      "GP Practices"
    ]
  }
]